# use FT-LINK
source [find ./bsp/common/debug/ft-link.cfg]

### Set the target chip name and expected TAP ID ###
set _CHIPNAME riscv

### Add TAPs to the Scan Chain ###
jtag newtap $_CHIPNAME cpu -irlen 5

### Add CPU targets ###
set _TARGETNAME_0 $_CHIPNAME.cpu0
set _TARGETNAME_1 $_CHIPNAME.cpu1
set _TARGETNAME_2 $_CHIPNAME.cpu2
set _TARGETNAME_3 $_CHIPNAME.cpu3
set _TARGETNAME_4 $_CHIPNAME.cpu4
set _TARGETNAME_5 $_CHIPNAME.cpu5
set _TARGETNAME_6 $_CHIPNAME.cpu6
set _TARGETNAME_7 $_CHIPNAME.cpu7
set _TARGETNAME_8 $_CHIPNAME.cpu8
set _TARGETNAME_9 $_CHIPNAME.cpu9
set _TARGETNAME_10 $_CHIPNAME.cpu10
set _TARGETNAME_11 $_CHIPNAME.cpu11
set _TARGETNAME_12 $_CHIPNAME.cpu12
set _TARGETNAME_13 $_CHIPNAME.cpu13
set _TARGETNAME_14 $_CHIPNAME.cpu14
set _TARGETNAME_15 $_CHIPNAME.cpu15
set _TARGETNAME_16 $_CHIPNAME.cpu16
set _TARGETNAME_17 $_CHIPNAME.cpu17
set _TARGETNAME_18 $_CHIPNAME.cpu18
set _TARGETNAME_19 $_CHIPNAME.cpu19
set _TARGETNAME_20 $_CHIPNAME.cpu20
set _TARGETNAME_21 $_CHIPNAME.cpu21

target create $_TARGETNAME_0 riscv -chain-position $_CHIPNAME.cpu -coreid 0 -gdb-port 3000
target create $_TARGETNAME_1 riscv -chain-position $_CHIPNAME.cpu -coreid 1 -gdb-port 3001
target create $_TARGETNAME_2 riscv -chain-position $_CHIPNAME.cpu -coreid 2 -gdb-port 3002
target create $_TARGETNAME_3 riscv -chain-position $_CHIPNAME.cpu -coreid 3 -gdb-port 3003
target create $_TARGETNAME_4 riscv -chain-position $_CHIPNAME.cpu -coreid 4 -gdb-port 3004
target create $_TARGETNAME_5 riscv -chain-position $_CHIPNAME.cpu -coreid 5 -gdb-port 3005
target create $_TARGETNAME_6 riscv -chain-position $_CHIPNAME.cpu -coreid 6 -gdb-port 3006
target create $_TARGETNAME_7 riscv -chain-position $_CHIPNAME.cpu -coreid 7 -gdb-port 3007
target create $_TARGETNAME_8 riscv -chain-position $_CHIPNAME.cpu -coreid 8 -gdb-port 3008
target create $_TARGETNAME_9 riscv -chain-position $_CHIPNAME.cpu -coreid 9 -gdb-port 3009
target create $_TARGETNAME_10 riscv -chain-position $_CHIPNAME.cpu -coreid 10 -gdb-port 3010
target create $_TARGETNAME_11 riscv -chain-position $_CHIPNAME.cpu -coreid 11 -gdb-port 3011
target create $_TARGETNAME_12 riscv -chain-position $_CHIPNAME.cpu -coreid 12 -gdb-port 3012
target create $_TARGETNAME_13 riscv -chain-position $_CHIPNAME.cpu -coreid 13 -gdb-port 3013
target create $_TARGETNAME_14 riscv -chain-position $_CHIPNAME.cpu -coreid 14 -gdb-port 3014
target create $_TARGETNAME_15 riscv -chain-position $_CHIPNAME.cpu -coreid 15 -gdb-port 3015
target create $_TARGETNAME_16 riscv -chain-position $_CHIPNAME.cpu -coreid 16 -gdb-port 3016
target create $_TARGETNAME_17 riscv -chain-position $_CHIPNAME.cpu -coreid 17 -gdb-port 3017
target create $_TARGETNAME_18 riscv -chain-position $_CHIPNAME.cpu -coreid 18 -gdb-port 3018
target create $_TARGETNAME_19 riscv -chain-position $_CHIPNAME.cpu -coreid 19 -gdb-port 3019
target create $_TARGETNAME_20 riscv -chain-position $_CHIPNAME.cpu -coreid 20 -gdb-port 3020
target create $_TARGETNAME_21 riscv -chain-position $_CHIPNAME.cpu -coreid 21 -gdb-port 3021

### Configure work area ###
# Work areas are small RAM areas associated with CPU targets. They are used by OpenOCD to speed up 
# downloads, and to download small snippets of code to program flash chips.
$_TARGETNAME_0 configure -work-area-phys 0x50000000 -work-area-size 0x1000 -work-area-backup 1

### Chip reset procedure ###
init

echo "Ready for Remote Connections"